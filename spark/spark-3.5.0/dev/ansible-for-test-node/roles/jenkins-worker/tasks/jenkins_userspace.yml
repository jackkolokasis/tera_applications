---
# set up the jenkins worker userspace
- name: ensure groups jenkins will need are present
  group:
    name: "{{ item }}"
    state: present
  loop:
    - jenkins
    - docker

- name: create jenkins login
  user:
    name: jenkins
    group: jenkins
    groups: docker
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: ".ssh/id_rsa"
    shell: /bin/bash

- name: create the jenkins workspace directory
  file:
    path: "{{ jenkins_home }}/workspace"
    state: directory
    mode: 0755
    owner: jenkins
    group: jenkins

- name: create the jenkins worker bin directory
  file:
    path: "{{ jenkins_home }}/bin"
    state: directory
    mode: 0755
    owner: jenkins
    group: jenkins

- name: copy utility scripts to jenkins bin dir
  copy:
    src: "util_scripts/{{ item }}"
    dest: "{{ jenkins_home }}/bin/"
    mode: 0755
    owner: jenkins
    group: jenkins
  loop:
    - session_lock_resource.py
    - kill_zinc_nailgun.py
    - post_github_pr_comment.py

- name: update the jenkins proc and open file limits
  copy:
    src: worker-limits.conf
    dest: /etc/security/limits.conf
    owner: root
    group: root
    mode: 0644

- name: create per-executor ivy caches for spark builds
  file:
    path: "{{ jenkins_home }}/sparkivy"
    state: directory
    mode: 0755
    owner: jenkins
    group: jenkins

- name: create the jenkins git cache directory
  file:
    path: "{{ jenkins_home }}/gitcaches"
    state: directory
    mode: 0755
    owner: jenkins
    group: jenkins

- name: create specific local gitcaches for some projects to speed clone time
  git:
    accept_hostkey: yes
    bare: yes
    dest: "{{ item.value.dir }}"
    repo: "{{ item.value.repo }}"
    update: no
  become: yes
  become_user: jenkins
  loop: "{{ lookup('dict', git_caches) }}"
  tags:
    - skip_ansible_lint

- name: configure git cache repos
  git_config:
    name: gc.pruneexpire
    value: never
    repo: "{{ item.value.dir }}"
    scope: local
  become: yes
  become_user: jenkins
  loop: "{{ lookup('dict', git_caches) }}"
  tags:
    - skip_ansible_lint

- name: perform initial fetch
  shell:
    "cd {{ item.value.dir }} && /usr/bin/git fetch --all"
  become: yes
  become_user: jenkins
  loop: "{{ lookup('dict', git_caches) }}"
  changed_when: False
  tags:
    - skip_ansible_lint

- name: set up cron job as jenkins to update gitcaches
  cron:
    name: "{{ item.name }}"
    minute: "*/5"
    job: "{{ item.cmd }}"
    user: jenkins
  loop:
    - {
    name: "Spark reference update",
    cmd: "cd /home/jenkins/gitcaches/spark.reference && git remote update >/dev/null 2>&1"
    }

