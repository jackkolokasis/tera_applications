---
# install spark build packages
- name: install pypy3
  apt:
    pkg:
      - pypy3
    state: present
    update_cache: yes

- name: download pip module for pypy
  get_url:
    url: '{{ pypy_pip_mirror }}/{{ pypy_pip_module }}'
    dest: '/tmp/{{ pypy_pip_module }}'
    mode: 0644

- name: install pip module for pypy
  command: 'pypy3  /tmp/{{ pypy_pip_module }}'
  changed_when: False

- name: remove temporary pip module for pypy
  file:
    path: '/tmp/{{ pypy_pip_module }}'
    state: absent

- name: install test coverage package for pypy
  command: 'pypy3 -m pip install coverage==4.5.2'
  changed_when: False

- name: check for spark py3k env
  command: "conda env list"
  environment:
    PATH: "{{ anaconda_home }}/bin:{{ ansible_env.PATH }}"
  changed_when: False
  check_mode: no
  register: py3k_check

- block:
  - name: copy python 3.6 conda environment for spark testing (2.4)
    copy:
      src: "python_environments/{{ spark_py3k_environment }}"
      dest: "/tmp/{{ spark_py3k_environment }}"
      owner: jenkins
      group: jenkins
      mode: 0660

  - name: create py3k conda environment for spark
    command: "conda create -y --name py3k --file /tmp/{{ spark_py3k_environment }}"
    environment:
      PATH: "{{ anaconda_home }}/bin:{{ ansible_env.PATH }}"
    become: yes
    become_user: jenkins

  - name: delete py3k conda environment file
    file:
      path: "/tmp/{{ spark_py3k_environment }}"
      state: absent
  when: "'py3k' not in py3k_check.stdout"

- block:
  - name: copy python 3.6 conda environment for spark testing (master, 3.x+)
    copy:
      src: "python_environments/{{ spark_py36_environment }}"
      dest: "/tmp/{{ spark_py36_environment }}"
      owner: jenkins
      group: jenkins
      mode: 0660

  - name: create py36 conda environment for spark
    command: "conda create -y --name py36 --file /tmp/{{ spark_py36_environment }}"
    environment:
      PATH: "{{ anaconda_home }}/bin:{{ ansible_env.PATH }}"
    become: yes
    become_user: jenkins

  - name: delete py36 conda environment file
    file:
      path: "/tmp/{{ spark_py36_environment }}"
      state: absent
  when: "'py36' not in py3k_check.stdout"


- name: create symlink for anaconda homedir
  file:
    src: "{{ anaconda_home }}"
    dest: "/home/anaconda"
    state: link

- name: copy python2 pip requirements file
  copy:
    src: "python_environments/{{ spark_py2_pip_requirements }}"
    dest: "/tmp/{{ spark_py2_pip_requirements }}"
    owner: jenkins
    group: jenkins
    mode: 0660

- name: install python2 doc and test packages for spark
  pip:
    requirements: "/tmp/{{ spark_py2_pip_requirements }}"
    extra_args: --ignore-installed
  environment:
    PATH: "{{ anaconda_home }}/bin:{{ ansible_env.PATH }}"
  become: yes
  become_user: jenkins

- name: delete python2 pip requirements file
  file:
    path: "/tmp/{{ spark_py2_pip_requirements }}"
    state: absent

- name: add cran apt repo key
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: "{{ r_cran_repo_key }}"
    state: present

- name: add cran apt repo
  apt_repository:
    repo: "{{ r_cran_repo }}"
    update_cache: yes

- name: install sparkR system deps
  apt:
    pkg:
      - default-jre
      - default-jre-headless # both for r-cran-rjava
      - libcurl4-openssl-dev  # devtools package dep
      - libxml2-dev  # lintr dep
      - qpdf
      - libssh2-1-dev  # devtools dep
      - libssl-dev # git2r dep
      - libodbc1
    state: present

- name: install base R packages
  apt:
    pkg:
      - r-base-core
      - r-base-dev
    state: present

- name: ensure R java environment is properly set up
  command: "/usr/bin/R CMD javareconf"
  environment:
    JAVA_HOME: "/usr/java/latest"
  register: r_result
  changed_when: False
  failed_when: "r_result.rc != 0 or 'had non-zero exit status' in r_result.stderr"

- name: install rJava
  apt:
    name: r-cran-rjava
    state: present

- name: install next set java R packages
  apt:
    pkg:
      - r-cran-rodbc
      - r-mathlib

- name: install required R packages via Rscript (default version)
  command: /usr/bin/Rscript --no-echo --no-save --no-restore-history -e "if (! ('{{ item }}' %in% installed.packages()[,'Package'])) { install.packages(pkgs='{{ item }}'); print('Added'); } else { print('Already installed'); }"
  register: r_result
  failed_when: "r_result.rc != 0 or 'had non-zero exit status' in r_result.stderr"
  changed_when: "'Added' in r_result.stdout"
  loop:
    - digest
    - knitr
    - devtools
    - plyr
    - roxygen2
    - rmarkdown
    - e1071
    - testthat

- name: get list of installed packages
  command: /usr/bin/Rscript -e "installed.packages()[,'Package']"
  changed_when: False
  check_mode: no
  register: r_check

- name: install lintr v2.0.0
  command: /usr/bin/Rscript --no-echo --no-save --no-restore-history -e "devtools::install_github('jimhester/lintr@v2.0.0')"
  when: "'lintr' not in r_check.stdout"
